function out = bino_ci(a, m, b, n, p, iter, width)

% A novel method by RJE
%
% a = successes for condition A (control)
% m = total trials for condition A
%
% b = successes for condition B (experimental)
% n = total trials for condition B
%
% p is the subsample size expressed as a proportion (from 0 to 1) 
%
% Nov 2017

%% get key parameters
pA = a/m;
pB = b/n;

diff = pB - pA; % B minus A for convention of A/B testing

if nargin < 5
    p = .10;
else
    % make sure that p is between 0 and 1
    if p > 1
        error('p must be between 0 and 1. Please respecify.')
    end
end

if nargin < 6
    iter = 1000;
end

if nargin < 7
    width = 95;
end

%% create "full samples"

% will produce vectors of 0s and 1s
fsA = pdf2vals(a,m);
fsB = pdf2vals(b,n);

%% Monte Carlo

piA = nan(iter,1);
piB = nan(iter,1);

% get the subsample sizes
q1 = floor(p * m);
q2 = floor(p * n);

for i = 1:iter
    
    % random indices
    indA = randi([1 m],q1,1);
    indB = randi([1 n],q2,1);
    
    % get the values
    siA = fsA(indA);
    siB = fsB(indB);
    
    % calculate observed success proportions
    piA(i) = sum(siA) / q1;
    piB(i) = sum(siB) / q2;
    
end


%% observed diffference score
% since piA and piB values are independent from each other, this value
% should change each time
 
 obs_diff = piB - piA;
 
 sign_diff = sign(piB - piA);

 
 % easy Mann Whitney PS value
 PS = (sum(sign_diff == 1) + floor(sum(sign_diff == 0) / 2)) / iter;


%% Mann Whitney test
% we actually don't need to do this because it takes time
% RJE confirmed that the PS statistic generated by rank_out is very similar
% to the manually calculated PS above

%rank_out = ranksum_rje(piA,piB)

%% plots



figure(10)
subplot(1,2,1)
percentiles = [2.5 97.5];
fignum = 0; % don't call a new figure

boxplot_rje([piA, piB], percentiles, fignum);

% rescale y-axis
ymin = max(0, min(min(piA),min(piB)) * .95);
ymax = min(1, max(max(piA),max(piB)) * .95);

xlim([0.5 2.5])
%ylim([ymin ymax])

xlabel('Condition')
ylabel('Probability of sucess')
title(['sampA = ' num2str(q1) '; sampB = ' num2str(q2) ])

subplot(1,2,2)
boxplot_rje(obs_diff, percentiles, fignum);

ylabel('pB - pA')
title('Difference score')

% don't reset the axes

%% outputs
out.PS = PS;
